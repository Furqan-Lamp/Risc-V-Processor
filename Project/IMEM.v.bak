module IMEM(
input [31:0] address,
output [31:0] instruction );

reg [7:0] rom[35:0];

initial 
begin
	//////////I-Type Load Word
	{rom[3],rom[2],rom[1],rom[0]}     	=	 32'b0000000_01000_00001_000_10000_0100011; //Sb
	{rom[7],rom[6],rom[5],rom[4]}     	=	 32'b00000010000_00001_000_00011_0000011; //lb
	//{rom[11],rom[10],rom[9],rom[8]}     	=	 32'b000000001110_00001_010_01111_0000011; //lw
	//{rom[15],rom[14],rom[13],rom[12]}     	=	 32'b000000001110_00001_100_01111_0000011; //lw
	//{rom[19],rom[18],rom[17],rom[16]}     	=	 32'b000000001110_00001_101_01111_0000011; //lw
	//{rom[23],rom[22],rom[21],rom[20]}     	=	 32'b000000001110_00001_110_01111_0000011; //lw
	//{rom[27],rom[26],rom[25],rom[24]}     	=	 32'b000000001110_00001_111_01111_0000011; //lw


	//////////I-Type basic
	//{rom[3],rom[2],rom[1],rom[0]}     	=	 32'b000000001110_00001_000_01111_0010011; //Addi
	//{rom[7],rom[6],rom[5],rom[4]}	 	 =	 32'b0000000_01101_00001_001_01111_0010011; //SLLi
	//{rom[11],rom[10],rom[9],rom[8]}	 	 =	 32'b000000001110_00001_010_01111_0010011; //SLTi
	//{rom[15],rom[14],rom[13],rom[12]}	  =	 32'b000000001110_00001_011_01111_0010011; //SLTiu
	//{rom[19],rom[18],rom[17],rom[16]}	  =	 32'b000000001110_00001_100_01111_0010011; //XORi
	//{rom[23],rom[22],rom[21],rom[20]}	  =	 32'b0000000_00001_01101_101_01111_0010011; //SRLi
	//{rom[27],rom[26],rom[25],rom[24]}	  =	 32'b0100000_00001_01101_101_01111_0010011; //SRAi
	//{rom[31],rom[30],rom[29],rom[28]}	  =	 32'b000000001110_00001_110_01111_0010011; //ORi
	//{rom[35],rom[34],rom[33],rom[32]}	  =	 32'b000000001110_00001_111_01111_0010011; //ANDi
	///////////R-Type Instructions
	//{rom[3],rom[2],rom[1],rom[0]}     =	 32'b00000000111001101_000_01100_0110011;
	//{rom[7],rom[6],rom[5],rom[4]}     =	 32'b01000000111001101_000_01100_0110011;
	//{rom[11],rom[10],rom[9],rom[8]}   = 	 32'b00000000111001101_001_01100_0110011;
	//{rom[15],rom[14],rom[13],rom[12]} = 	 32'b00000000111001101_010_01100_0110011;
	//{rom[19],rom[18],rom[17],rom[16]} = 	 32'b00000000111001101_011_01100_0110011;
	//{rom[23],rom[22],rom[21],rom[20]} = 	 32'b00000000111001101_100_01100_0110011;
	//{rom[27],rom[26],rom[25],rom[24]} = 	 32'b00000000111001101_101_01100_0110011;
	//{rom[31],rom[30],rom[29],rom[28]} = 	 32'b00000000111001101_110_01100_0110011;
	//{rom[35],rom[34],rom[33],rom[32]} = 	 32'b00000000111001101_111_01100_0110011;
	//{rom[39],rom[38],rom[37],rom[36]} = 	 32'b00000000111001101_110_01100_0110011;
	//{rom[43],rom[42],rom[41],rom[40]} = 	 32'b01000000111001101_101_01100_0110011;
	//rom[1] = 32'b11111100111000001000011110010011;
end
	assign instruction = {rom[address+3],rom[address+2],rom[address+1],rom[address+0]}; 
endmodule 